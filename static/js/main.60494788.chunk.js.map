{"version":3,"sources":["components/Writer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["IgnoredCharacters","Levels","Easy","Normal","Hard","Writer","useState","level","setLevel","count","setCount","hasStarted","setHasStarted","hasEnded","setHasEnded","useEffect","interval","setInterval","newCount","Math","round","clearInterval","className","onClick","Number","toFixed","autoFocus","onKeyUp","keyCode","indexOf","defaultValue","disabled","href","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAIMA,G,MAAoB,CAAC,EAAG,GAAI,GAAI,KAMhCC,EAAkB,CACtBC,KAAM,GACNC,OAAQ,EACRC,KAAM,GAqFOC,EAhFU,WAAO,IAAD,EACHC,mBAHP,UAEU,mBACtBC,EADsB,KACfC,EADe,OAEHF,mBAASL,EAAM,QAFZ,mBAEtBQ,EAFsB,KAEfC,EAFe,OAGOJ,oBAAS,GAHhB,mBAGtBK,EAHsB,KAGVC,EAHU,OAIGN,oBAAS,GAJZ,mBAItBO,EAJsB,KAIZC,EAJY,KAM7BC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAWC,KAAKC,MAAuB,KAAhBX,EAAQ,MAAe,IAEnC,IAAbS,GACFJ,GAAY,GAGVH,IAAeE,GACjBH,EAASQ,KAEV,IACH,OAAO,kBAAYG,cAAcL,MAChC,CAACP,EAAOC,EAAUC,EAAYC,EAAeC,EAAUC,IAc1D,OACE,6BACE,yBAAKQ,UAAU,cACb,4CACA,uBACEA,UAAqB,SAAVf,EAAmB,SAAW,GACzCgB,QAAS,kBAAYf,EAAS,UAFhC,cAMA,uBACEc,UAAqB,WAAVf,EAAqB,SAAW,GAC3CgB,QAAS,kBAAYf,EAAS,YAFhC,eAMA,uBACEc,UAAqB,SAAVf,EAAmB,SAAW,GACzCgB,QAAS,kBAAYf,EAAS,UAFhC,cAODG,GAAc,4CAAkBa,OAAOf,GAAOgB,QAAQ,KACrDd,GAAc,yDACfE,GAAY,oCACZA,GAAY,6EACb,kBAAC,IAAD,CACES,UAAU,SACVI,WAAS,EACTC,QA1Cc,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAChBjB,GACHC,GAAc,IAG4B,IAAxCZ,EAAkB6B,QAAQD,IAI9BlB,EAAST,EAAOM,KAkCZuB,aAAa,sBACbC,SAAUlB,IAGXA,GACC,2BACE,uBAAGmB,KAAK,IAAIT,QAAS,kBAAMU,OAAOC,SAASC,WAA3C,sBAEK,IAHP,kCChEOC,EAlBO,WACpB,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,YAChB,6CACA,wGAIA,0FAEF,iCACE,kBAAC,EAAD,SCLYe,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60494788.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport \"./Writer.css\";\n\nconst IgnoredCharacters = [8, 46, 32, 13];\n\ntype TLevels = {\n  [key: string]: number;\n};\n\nconst Levels: TLevels = {\n  Easy: 10,\n  Normal: 5,\n  Hard: 2,\n};\n\nconst DefaultLevel = \"Normal\";\n\nconst Writer: React.FC = () => {\n  const [level, setLevel] = useState(DefaultLevel);\n  const [count, setCount] = useState(Levels[DefaultLevel]);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [hasEnded, setHasEnded] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newCount = Math.round((count - 0.05) * 100) / 100;\n\n      if (newCount === 0) {\n        setHasEnded(true);\n      }\n\n      if (hasStarted && !hasEnded) {\n        setCount(newCount);\n      }\n    }, 50);\n    return (): void => clearInterval(interval);\n  }, [count, setCount, hasStarted, setHasStarted, hasEnded, setHasEnded]);\n\n  const handleKeyUp = ({ keyCode }: React.KeyboardEvent): void => {\n    if (!hasStarted) {\n      setHasStarted(true);\n    }\n\n    if (IgnoredCharacters.indexOf(keyCode) !== -1) {\n      return;\n    }\n\n    setCount(Levels[level]);\n  };\n\n  return (\n    <div>\n      <div className=\"difficulty\">\n        <div>Difficulty:</div>\n        <p\n          className={level === \"Easy\" ? \"active\" : \"\"}\n          onClick={(): void => setLevel(\"Easy\")}\n        >\n          Easy (10s)\n        </p>\n        <p\n          className={level === \"Normal\" ? \"active\" : \"\"}\n          onClick={(): void => setLevel(\"Normal\")}\n        >\n          Normal (5s)\n        </p>\n        <p\n          className={level === \"Hard\" ? \"active\" : \"\"}\n          onClick={(): void => setLevel(\"Hard\")}\n        >\n          Hard (2s)\n        </p>\n      </div>\n      {hasStarted && <p>Seconds left: {Number(count).toFixed(2)}</p>}\n      {!hasStarted && <p>Begin writing something...</p>}\n      {hasEnded && <h1>DIE!</h1>}\n      {hasEnded && <p>Why not share your story on the social medias?</p>}\n      <TextareaAutosize\n        className=\"writer\"\n        autoFocus\n        onKeyUp={handleKeyUp}\n        defaultValue=\"Once upon a time...\"\n        disabled={hasEnded}\n      />\n\n      {hasEnded && (\n        <p>\n          <a href=\"#\" onClick={() => window.location.reload()}>\n            Write another one.\n          </a>{\" \"}\n          Go on, you know you want to.\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Writer;\n","/* eslint-disable react/no-unescaped-entities */\nimport React from \"react\";\nimport \"./App.css\";\nimport Writer from \"./components/Writer\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <header className=\"app-body\">\n        <h1>Write or Die!</h1>\n        <p>\n          Write a story and don't stop. After a few seconds of not typing, you\n          die.\n        </p>\n        <p>Deleting stuff doesn't count, so keep those ideas flowing.</p>\n      </header>\n      <section>\n        <Writer />\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}